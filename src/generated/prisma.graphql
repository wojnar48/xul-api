# source: https://us1.prisma.sh/szymon-wojnar/lax-api/dev
# timestamp: Tue Dec 11 2018 21:57:55 GMT-0500 (Eastern Standard Time)

type AggregateFilter {
  count: Int!
}

type AggregateFilterJob {
  count: Int!
}

type AggregateFilterResult {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Filter implements Node {
  id: ID!
  name: String!
  hits: Int
  filterTerms: [String!]!
  user: User!
  maxHits: Int
  frequency: Frequency!
  resultFilter: ResultFilter!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FilterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FilterEdge]!
  aggregate: AggregateFilter!
}

input FilterCreatefilterTermsInput {
  set: [String!]
}

input FilterCreateInput {
  name: String!
  hits: Int
  maxHits: Int
  frequency: Frequency!
  resultFilter: ResultFilter!
  filterTerms: FilterCreatefilterTermsInput
  user: UserCreateOneInput!
}

input FilterCreateOneInput {
  create: FilterCreateInput
  connect: FilterWhereUniqueInput
}

"""An edge in a connection."""
type FilterEdge {
  """The item at the end of the edge."""
  node: Filter!

  """A cursor for use in pagination."""
  cursor: String!
}

type FilterJob implements Node {
  id: ID!
  filter: Filter!
  user: User!
  frequency: Frequency!
  resultFilter: ResultFilter!
  lastRun: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FilterJobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FilterJobEdge]!
  aggregate: AggregateFilterJob!
}

input FilterJobCreateInput {
  frequency: Frequency!
  resultFilter: ResultFilter!
  lastRun: Float
  filter: FilterCreateOneInput!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type FilterJobEdge {
  """The item at the end of the edge."""
  node: FilterJob!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FilterJobOrderByInput {
  id_ASC
  id_DESC
  frequency_ASC
  frequency_DESC
  resultFilter_ASC
  resultFilter_DESC
  lastRun_ASC
  lastRun_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilterJobPreviousValues {
  id: ID!
  frequency: Frequency!
  resultFilter: ResultFilter!
  lastRun: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FilterJobSubscriptionPayload {
  mutation: MutationType!
  node: FilterJob
  updatedFields: [String!]
  previousValues: FilterJobPreviousValues
}

input FilterJobSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterJobSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterJobSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterJobSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FilterJobWhereInput
}

input FilterJobUpdateInput {
  frequency: Frequency
  resultFilter: ResultFilter
  lastRun: Float
  filter: FilterUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
}

input FilterJobUpdateManyMutationInput {
  frequency: Frequency
  resultFilter: ResultFilter
  lastRun: Float
}

input FilterJobWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterJobWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterJobWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterJobWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  frequency: Frequency

  """All values that are not equal to given value."""
  frequency_not: Frequency

  """All values that are contained in given list."""
  frequency_in: [Frequency!]

  """All values that are not contained in given list."""
  frequency_not_in: [Frequency!]
  resultFilter: ResultFilter

  """All values that are not equal to given value."""
  resultFilter_not: ResultFilter

  """All values that are contained in given list."""
  resultFilter_in: [ResultFilter!]

  """All values that are not contained in given list."""
  resultFilter_not_in: [ResultFilter!]
  lastRun: Float

  """All values that are not equal to given value."""
  lastRun_not: Float

  """All values that are contained in given list."""
  lastRun_in: [Float!]

  """All values that are not contained in given list."""
  lastRun_not_in: [Float!]

  """All values less than the given value."""
  lastRun_lt: Float

  """All values less than or equal the given value."""
  lastRun_lte: Float

  """All values greater than the given value."""
  lastRun_gt: Float

  """All values greater than or equal the given value."""
  lastRun_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  filter: FilterWhereInput
  user: UserWhereInput
}

input FilterJobWhereUniqueInput {
  id: ID
}

enum FilterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hits_ASC
  hits_DESC
  maxHits_ASC
  maxHits_DESC
  frequency_ASC
  frequency_DESC
  resultFilter_ASC
  resultFilter_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilterPreviousValues {
  id: ID!
  name: String!
  hits: Int
  filterTerms: [String!]!
  maxHits: Int
  frequency: Frequency!
  resultFilter: ResultFilter!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FilterResult implements Node {
  id: ID!
  url: String
  filter: Filter!
  published: String
  author: String
  points: Int
  comments: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FilterResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FilterResultEdge]!
  aggregate: AggregateFilterResult!
}

input FilterResultCreateInput {
  url: String
  published: String
  author: String
  points: Int
  comments: Int
  filter: FilterCreateOneInput!
}

"""An edge in a connection."""
type FilterResultEdge {
  """The item at the end of the edge."""
  node: FilterResult!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FilterResultOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  published_ASC
  published_DESC
  author_ASC
  author_DESC
  points_ASC
  points_DESC
  comments_ASC
  comments_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilterResultPreviousValues {
  id: ID!
  url: String
  published: String
  author: String
  points: Int
  comments: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FilterResultSubscriptionPayload {
  mutation: MutationType!
  node: FilterResult
  updatedFields: [String!]
  previousValues: FilterResultPreviousValues
}

input FilterResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterResultSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FilterResultWhereInput
}

input FilterResultUpdateInput {
  url: String
  published: String
  author: String
  points: Int
  comments: Int
  filter: FilterUpdateOneRequiredInput
}

input FilterResultUpdateManyMutationInput {
  url: String
  published: String
  author: String
  points: Int
  comments: Int
}

input FilterResultWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  published: String

  """All values that are not equal to given value."""
  published_not: String

  """All values that are contained in given list."""
  published_in: [String!]

  """All values that are not contained in given list."""
  published_not_in: [String!]

  """All values less than the given value."""
  published_lt: String

  """All values less than or equal the given value."""
  published_lte: String

  """All values greater than the given value."""
  published_gt: String

  """All values greater than or equal the given value."""
  published_gte: String

  """All values containing the given string."""
  published_contains: String

  """All values not containing the given string."""
  published_not_contains: String

  """All values starting with the given string."""
  published_starts_with: String

  """All values not starting with the given string."""
  published_not_starts_with: String

  """All values ending with the given string."""
  published_ends_with: String

  """All values not ending with the given string."""
  published_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  comments: Int

  """All values that are not equal to given value."""
  comments_not: Int

  """All values that are contained in given list."""
  comments_in: [Int!]

  """All values that are not contained in given list."""
  comments_not_in: [Int!]

  """All values less than the given value."""
  comments_lt: Int

  """All values less than or equal the given value."""
  comments_lte: Int

  """All values greater than the given value."""
  comments_gt: Int

  """All values greater than or equal the given value."""
  comments_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  filter: FilterWhereInput
}

input FilterResultWhereUniqueInput {
  id: ID
}

type FilterSubscriptionPayload {
  mutation: MutationType!
  node: Filter
  updatedFields: [String!]
  previousValues: FilterPreviousValues
}

input FilterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FilterWhereInput
}

input FilterUpdateDataInput {
  name: String
  hits: Int
  maxHits: Int
  frequency: Frequency
  resultFilter: ResultFilter
  filterTerms: FilterUpdatefilterTermsInput
  user: UserUpdateOneRequiredInput
}

input FilterUpdatefilterTermsInput {
  set: [String!]
}

input FilterUpdateInput {
  name: String
  hits: Int
  maxHits: Int
  frequency: Frequency
  resultFilter: ResultFilter
  filterTerms: FilterUpdatefilterTermsInput
  user: UserUpdateOneRequiredInput
}

input FilterUpdateManyMutationInput {
  name: String
  hits: Int
  maxHits: Int
  frequency: Frequency
  resultFilter: ResultFilter
  filterTerms: FilterUpdatefilterTermsInput
}

input FilterUpdateOneRequiredInput {
  create: FilterCreateInput
  connect: FilterWhereUniqueInput
  update: FilterUpdateDataInput
  upsert: FilterUpsertNestedInput
}

input FilterUpsertNestedInput {
  update: FilterUpdateDataInput!
  create: FilterCreateInput!
}

input FilterWhereInput {
  """Logical AND on all given filters."""
  AND: [FilterWhereInput!]

  """Logical OR on all given filters."""
  OR: [FilterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FilterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  hits: Int

  """All values that are not equal to given value."""
  hits_not: Int

  """All values that are contained in given list."""
  hits_in: [Int!]

  """All values that are not contained in given list."""
  hits_not_in: [Int!]

  """All values less than the given value."""
  hits_lt: Int

  """All values less than or equal the given value."""
  hits_lte: Int

  """All values greater than the given value."""
  hits_gt: Int

  """All values greater than or equal the given value."""
  hits_gte: Int
  maxHits: Int

  """All values that are not equal to given value."""
  maxHits_not: Int

  """All values that are contained in given list."""
  maxHits_in: [Int!]

  """All values that are not contained in given list."""
  maxHits_not_in: [Int!]

  """All values less than the given value."""
  maxHits_lt: Int

  """All values less than or equal the given value."""
  maxHits_lte: Int

  """All values greater than the given value."""
  maxHits_gt: Int

  """All values greater than or equal the given value."""
  maxHits_gte: Int
  frequency: Frequency

  """All values that are not equal to given value."""
  frequency_not: Frequency

  """All values that are contained in given list."""
  frequency_in: [Frequency!]

  """All values that are not contained in given list."""
  frequency_not_in: [Frequency!]
  resultFilter: ResultFilter

  """All values that are not equal to given value."""
  resultFilter_not: ResultFilter

  """All values that are contained in given list."""
  resultFilter_in: [ResultFilter!]

  """All values that are not contained in given list."""
  resultFilter_not_in: [ResultFilter!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input FilterWhereUniqueInput {
  id: ID
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFilterResult(data: FilterResultCreateInput!): FilterResult!
  createFilterJob(data: FilterJobCreateInput!): FilterJob!
  createUser(data: UserCreateInput!): User!
  createFilter(data: FilterCreateInput!): Filter!
  updateFilterResult(data: FilterResultUpdateInput!, where: FilterResultWhereUniqueInput!): FilterResult
  updateFilterJob(data: FilterJobUpdateInput!, where: FilterJobWhereUniqueInput!): FilterJob
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFilter(data: FilterUpdateInput!, where: FilterWhereUniqueInput!): Filter
  deleteFilterResult(where: FilterResultWhereUniqueInput!): FilterResult
  deleteFilterJob(where: FilterJobWhereUniqueInput!): FilterJob
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFilter(where: FilterWhereUniqueInput!): Filter
  upsertFilterResult(where: FilterResultWhereUniqueInput!, create: FilterResultCreateInput!, update: FilterResultUpdateInput!): FilterResult!
  upsertFilterJob(where: FilterJobWhereUniqueInput!, create: FilterJobCreateInput!, update: FilterJobUpdateInput!): FilterJob!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFilter(where: FilterWhereUniqueInput!, create: FilterCreateInput!, update: FilterUpdateInput!): Filter!
  updateManyFilterResults(data: FilterResultUpdateManyMutationInput!, where: FilterResultWhereInput): BatchPayload!
  updateManyFilterJobs(data: FilterJobUpdateManyMutationInput!, where: FilterJobWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyFilters(data: FilterUpdateManyMutationInput!, where: FilterWhereInput): BatchPayload!
  deleteManyFilterResults(where: FilterResultWhereInput): BatchPayload!
  deleteManyFilterJobs(where: FilterJobWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFilters(where: FilterWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  FILTERCREATE
  FILTERUPDATE
  FILTERDELETE
  PERMISSIONUPDATE
}

type Query {
  filterResults(where: FilterResultWhereInput, orderBy: FilterResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterResult]!
  filterJobs(where: FilterJobWhereInput, orderBy: FilterJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FilterJob]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  filters(where: FilterWhereInput, orderBy: FilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Filter]!
  filterResult(where: FilterResultWhereUniqueInput!): FilterResult
  filterJob(where: FilterJobWhereUniqueInput!): FilterJob
  user(where: UserWhereUniqueInput!): User
  filter(where: FilterWhereUniqueInput!): Filter
  filterResultsConnection(where: FilterResultWhereInput, orderBy: FilterResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterResultConnection!
  filterJobsConnection(where: FilterJobWhereInput, orderBy: FilterJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterJobConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  filtersConnection(where: FilterWhereInput, orderBy: FilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FilterConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ResultFilter {
  NOFILTER
  HIPOINTS
  HICOMMENTS
}

type Subscription {
  filterResult(where: FilterResultSubscriptionWhereInput): FilterResultSubscriptionPayload
  filterJob(where: FilterJobSubscriptionWhereInput): FilterJobSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  filter(where: FilterSubscriptionWhereInput): FilterSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  resetToken: String
  tokenExpiry: Float
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  resetToken: String
  tokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  tokenExpiry_ASC
  tokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  resetToken: String
  tokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  email: String
  password: String
  resetToken: String
  tokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  resetToken: String
  tokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  resetToken: String
  tokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  tokenExpiry: Float

  """All values that are not equal to given value."""
  tokenExpiry_not: Float

  """All values that are contained in given list."""
  tokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  tokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  tokenExpiry_lt: Float

  """All values less than or equal the given value."""
  tokenExpiry_lte: Float

  """All values greater than the given value."""
  tokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  tokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
